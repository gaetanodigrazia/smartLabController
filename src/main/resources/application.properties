#how port mapping works???
server.port = 8080
#->>>w the entire app
#spring.datasource.url=jdbc:mysql://mysqld:3306/hub 
spring.datasource.url=jdbc:mysql://localhost:3307/hub
spring.datasource.username=root
spring.datasource.password=123Stella
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#spring.jpa.hibernate.ddl-auto=create-drop

#FOR SWAGGER SPRINGFOX LIB
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

# Default user name.
#spring.security.user.name=user
# Password
#spring.security.user.password=root

keycloak.realm                      = smartLab
keycloak.auth-server-url            = http://localhost:8090/auth
keycloak.ssl-required               = external
keycloak.resource                   = smartlab-microservices-client
keycloak.credentials.secret         = Y4z7gG83g7fQ2JtVaoiVpJg97874XvH4
keycloak.use-resource-role-mappings = true
keycloak.bearer-only                = true

#spring.security.oauth2.client.registration.oauth2-smartLab-user-realm-client.client-id=oauth2-smartLab-user-realm
#spring.security.oauth2.client.registration.oauth2-smartLab-user-realm.client-secret=MiFFt8EuNEl9WIi4m6MH4QMQNoSO8P3j
#spring.security.oauth2.client.registration.oauth2-smartLab-user-realm.scope=openid, profile, roles
#spring.security.oauth2.client.registration.oauth2-smartLab-user-realm.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.oauth2-smartLab-user-realm.redirect-uri=http://localhost:8080/login/oauth2/code/oauth2-smartLab-user-realm

#spring.security.oauth2.client.provider.oauth2-smartLab-user-realm-client.issuer-uri=http://localhost:8180/auth/realms/oauth2-smartLab-user-realm

#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8180/auth/realms/oauth2-smartLab-realm/protocol/openid-connect/certs
